// Code generated by hertz generator.

package UserCommPb

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"log"
	dyUtils "paigu1902/douyin/common/utils"
	"paigu1902/douyin/service/api-gateway/biz/rpcClient"
	"paigu1902/douyin/service/rpc-user-operator/rpc-user-comment/kitex_gen/UserCommPb"
	"strconv"
)

type CommentActionReq struct {
	CommentId   string `query:"comment_id"`
	VideoId     string `query:"video_id"`
	ActionType  string `query:"action_type"`
	CommentText string `query:"comment_text" vd:"len($)>=0 && len($)<30"`
}

type CommentsInfoReq struct {
	UserId  int64 `query:"user_id"`
	VideoId int64 `query:"video_id"`
}

type CommentHttp struct {
	Id         int64     `json:"id"`
	User       *UserHttp `json:"user"`
	Content    string    `json:"content"`
	CreateDate string    `json:"create_date"`
}

type UserHttp struct {
	UserId          int64  `json:"id"`
	UserName        string `json:"name"`
	FollowCount     int64  `json:"follow_count"`
	FollowerCount   int64  `json:"follower_count"`
	IsFollow        bool   `json:"is_follow"`
	Avatar          string `json:"avatar" default:""`
	BackgroundImage string `json:"background_image" default:""`
	Signature       string `json:"signature" default:""`
	TotalFavorited  string `json:"total_favorited" default:""`
	WorkCount       int64  `json:"work_count" default:"0"`
	FavoriteCount   int64  `json:"favorite_count" default:"0"`
}

func getComments(comments []*UserCommPb.Comment) []*CommentHttp {
	res := make([]*CommentHttp, len(comments))
	log.Println(comments)
	for i, v := range comments {
		res[i] = &CommentHttp{
			Id: v.GetId(),
			User: &UserHttp{
				UserId:        v.GetUser().GetId(),
				UserName:      v.GetUser().GetName(),
				FollowerCount: v.GetUser().GetFollowerCount(),
				FollowCount:   v.GetUser().GetFollowCount(),
				IsFollow:      v.GetUser().GetIsFollow(),
			},
			Content:    v.GetContent(),
			CreateDate: v.GetCreateDate(),
		}
	}
	return res
}

func CommentActionMethod(ctx context.Context, c *app.RequestContext) {
	req := new(CommentActionReq)
	if err := c.BindAndValidate(req); err != nil {
		c.JSON(400, err.Error())
		return
	}
	id, err := dyUtils.GetFromId(c)
	if err != nil {
		c.JSON(400, err.Error())
	}
	userId := id

	actionType, _ := strconv.Atoi(req.ActionType)
	videoId, _ := strconv.Atoi(req.VideoId)
	commentId, _ := strconv.Atoi(req.CommentId)
	resp, err := rpcClient.UserComm.CommentAction(ctx, &UserCommPb.DouyinCommentActionRequest{
		UserId:      int64(userId),
		VideoId:     int64(videoId),
		ActionType:  int32(actionType),
		CommentText: req.CommentText,
		CommentId:   int64(commentId),
	})
	if err != nil {
		c.JSON(400, err.Error())
		return
	}
	c.JSON(200, utils.H{
		"status_code": resp.GetStatusCode(),
		"status_msg":  resp.GetStatusMsg(),
	})
	return
}

func CommentGetListMethod(ctx context.Context, c *app.RequestContext) {
	req := new(CommentsInfoReq)
	if err := c.BindAndValidate(req); err != nil {
		c.JSON(400, err.Error())
		return
	}
	id, err := dyUtils.GetFromId(c)
	if err != nil {
		c.JSON(400, err.Error())
	}
	userId := id
	resp, err := rpcClient.UserComm.GetCommentsByVideo(ctx, &UserCommPb.DouyinCommentListRequest{
		UserId:  int64(userId),
		VideoId: req.VideoId,
	})
	if err != nil {
		c.JSON(400, err.Error())
		return
	}
	c.JSON(200, utils.H{
		"status_code":  resp.GetStatusCode(),
		"status_msg":   resp.GetStatusMsg(),
		"comment_list": getComments(resp.GetCommentList()),
	})
	return
}

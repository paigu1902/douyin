// Code generated by hertz generator.

package UserCommPb

import (
	"context"
	"errors"
	"github.com/cloudwego/hertz/pkg/app"
	"log"
	"paigu1902/douyin/service/api-gateway/biz/rpcClient"
	"paigu1902/douyin/service/rpc-user-operator/rpc-user-comment/kitex_gen/UserCommPb"
	"strconv"
)

type CommentActionReq struct {
	CommentId   string `query:"comment_id"`
	VideoId     string `query:"video_id"`
	ActionType  string `query:"action_type"`
	CommentText string `query:"comment_text" vd:"len($)>=0 && len($)<30"`
}

type CommentsInfoReq struct {
	UserId  int64 `query:"user_id"`
	VideoId int64 `query:"video_id"`
}

func getFromId(c *app.RequestContext) (uint64, error) {
	value, exists := c.Get("from_id")
	if exists != true {
		return 0, errors.New("token解析失败")
	}
	fromId := uint64(value.(uint))
	return fromId, nil
}

func CommentActionMethod(ctx context.Context, c *app.RequestContext) {
	req := new(CommentActionReq)
	if err := c.BindAndValidate(req); err != nil {
		c.JSON(400, err.Error())
		return
	}

	id, err := getFromId(c)
	if err != nil {
		c.JSON(400, err.Error())
	}
	userId := id

	actionType, _ := strconv.Atoi(req.ActionType)
	videoId, _ := strconv.Atoi(req.VideoId)
	commentId, _ := strconv.Atoi(req.CommentId)
	resp, err := rpcClient.UserComm.CommentAction(ctx, &UserCommPb.DouyinCommentActionRequest{
		UserId:      int64(userId),
		VideoId:     int64(videoId),
		ActionType:  int32(actionType),
		CommentText: req.CommentText,
		CommentId:   int64(commentId),
	})
	if err != nil {
		log.Println("400 le")
		c.JSON(400, err.Error())
		return
	}
	c.JSON(200, &resp)
	return
}

func CommentGetListMethod(ctx context.Context, c *app.RequestContext) {
	req := new(CommentsInfoReq)
	if err := c.BindAndValidate(req); err != nil {
		c.JSON(400, err.Error())
		return
	}
	resp, err := rpcClient.UserComm.GetCommentsByVideo(ctx, &UserCommPb.DouyinCommentListRequest{
		UserId:  req.UserId,
		VideoId: req.VideoId,
	})
	if err != nil {
		c.JSON(400, err.Error())
		return
	}
	c.JSON(200, &resp)
	return
}

func CommentNumberMethod(ctx context.Context, c *app.RequestContext) {
	req := new(CommentsInfoReq)
	if err := c.BindAndValidate(req); err != nil {
		c.JSON(400, err.Error())
		return
	}
	resp, err := rpcClient.UserComm.GetCommentNumberByVideo(ctx, &UserCommPb.DouyinCommentNumberRequest{
		UserId:  req.UserId,
		VideoId: req.VideoId,
	})
	if err != nil {
		c.JSON(400, err.Error())
		return
	}
	c.JSON(200, &resp)
	return
}

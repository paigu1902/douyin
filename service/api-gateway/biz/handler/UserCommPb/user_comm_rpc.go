// Code generated by hertz generator.

package UserCommPb

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"log"
	"paigu1902/douyin/service/api-gateway/biz/rpcClient"
	"paigu1902/douyin/service/rpc-user-operator/rpc-user-comment/kitex_gen/UserCommPb"
	"strconv"
)

type CommentActionReq struct {
	UserId      int64 `query:"user_id"`
	CommentId   int64
	VideoId     int64  `query:"video_id"`
	ActionType  int32  `query:"action_type"`
	CommentText string `vd:"len($)>=0 && len($)<30"`
}

type CommentsInfoReq struct {
	UserId  int64 `query:"user_id"`
	VideoId int64 `query:"video_id"`
}

type CommentHttp struct {
	Id         int64     `json:"comment_id"`
	User       *UserHttp `json:"user"`
	Content    string    `json:"content"`
	CreateDate string    `json:"c_time"`
}

type UserHttp struct {
	UserId        int64  `json:"id"`
	UserName      string `json:"name"`
	FollowCount   int64  `json:"follow_count"`
	FollowerCount int64  `json:"follower_count"`
	IsFollow      bool   `json:"is_follow"`
}

func getComments(comments []*UserCommPb.Comment) []*CommentHttp {
	res := make([]*CommentHttp, len(comments))
	log.Println(comments)
	for i, v := range comments {
		res[i] = &CommentHttp{
			Id: v.GetId(),
			User: &UserHttp{
				UserId:        v.GetUser().GetId(),
				UserName:      v.GetUser().GetName(),
				FollowerCount: v.GetUser().GetFollowerCount(),
				FollowCount:   v.GetUser().GetFollowCount(),
				IsFollow:      v.GetUser().GetIsFollow(),
			},
			Content:    v.GetContent(),
			CreateDate: v.GetCreateDate(),
		}
	}
	return res
}

func CommentActionMethod(ctx context.Context, c *app.RequestContext) {
	req := new(CommentActionReq)
	if err := c.BindAndValidate(req); err != nil {
		c.JSON(400, err.Error())
		return
	}
	if req.ActionType == 2 {
		// 删除评论 comment_text = ""
		req.CommentText = ""
		CommentId, isOk := c.GetQuery("comment_id")
		log.Println(req.VideoId, CommentId)
		if !isOk {
			c.JSON(400, "get current comment_id error in delete comment")
			return
		}
		tmp, _ := strconv.Atoi(CommentId)
		req.CommentId = int64(tmp)
	} else {
		// 添加评论 comment_id = 0
		req.CommentId = 0
		CommentText, isOk := c.GetQuery("comment_text")
		log.Println(req.VideoId, req.UserId, CommentText)
		if !isOk {
			c.JSON(400, "get current comment_text error in add comment")
			return
		}
		if len(CommentText) == 0 {
			c.JSON(400, "add_op: the length of comment should not be 0")
			return
		}
		req.CommentText = CommentText
	}

	resp, err := rpcClient.UserComm.CommentAction(ctx, &UserCommPb.DouyinCommentActionRequest{
		UserId:      req.UserId,
		VideoId:     req.VideoId,
		ActionType:  req.ActionType,
		CommentText: req.CommentText,
		CommentId:   req.CommentId,
	})
	if err != nil {
		c.JSON(400, err.Error())
		return
	}
	c.JSON(200, utils.H{
		"status_code": resp.GetStatusCode(),
		"status_msg":  resp.GetStatusMsg(),
	})
	return
}

func CommentGetListMethod(ctx context.Context, c *app.RequestContext) {
	req := new(CommentsInfoReq)
	if err := c.BindAndValidate(req); err != nil {
		c.JSON(400, err.Error())
		return
	}
	resp, err := rpcClient.UserComm.GetCommentsByVideo(ctx, &UserCommPb.DouyinCommentListRequest{
		UserId:  req.UserId,
		VideoId: req.VideoId,
	})
	if err != nil {
		c.JSON(400, err.Error())
		return
	}
	c.JSON(200, utils.H{
		"status_code":  resp.GetStatusCode(),
		"status_msg":   resp.GetStatusMsg(),
		"comment_list": getComments(resp.GetCommentList()),
	})
	return
}

func CommentNumberMethod(ctx context.Context, c *app.RequestContext) {
	req := new(CommentsInfoReq)
	if err := c.BindAndValidate(req); err != nil {
		c.JSON(400, err.Error())
		return
	}
	resp, err := rpcClient.UserComm.GetCommentNumberByVideo(ctx, &UserCommPb.DouyinCommentNumberRequest{
		UserId:  req.UserId,
		VideoId: req.VideoId,
	})
	if err != nil {
		c.JSON(400, err.Error())
		return
	}
	c.JSON(200, utils.H{
		"status_code": resp.GetStatusCode(),
		"status_msg": resp.GetStatusMsg(),
		"comment_count": resp.GetCount(),
	})
	return
}

// Code generated by hertz generator.

package userInfo

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"log"
	//"paigu1902/douyin/common/utils"
	"paigu1902/douyin/service/api-gateway/biz/rpcClient"
	"paigu1902/douyin/service/rpc-user-info/kitex_gen/userInfoPb"
	"strconv"
)

func LoginMethod(ctx context.Context, c *app.RequestContext) {
	var req userInfoPb.LoginReq
	var isok bool
	req.UserName, isok = c.GetQuery("username")
	req.Password, isok = c.GetQuery("password")
	if !isok {
		c.String(400, "获取参数失败")
		return
	}
	resp, err := rpcClient.UserInfo.Login(ctx, &userInfoPb.LoginReq{UserName: req.UserName, Password: req.Password})
	if err != nil {
		c.String(400, err.Error())
		return
	}
	log.Println("resp", resp)
	c.JSON(200, resp)

}

func RegisterMethod(ctx context.Context, c *app.RequestContext) {
	var req userInfoPb.RegisterReq
	var isok bool
	req.UserName, isok = c.GetQuery("username")
	req.Password, isok = c.GetQuery("password")
	if !isok {
		c.String(400, "获取参数失败")
		return
	}
	resp, err := rpcClient.UserInfo.Register(ctx, &userInfoPb.RegisterReq{UserName: req.UserName, Password: req.Password})
	if err != nil {
		c.String(400, err.Error())
		return
	}
	log.Println("resp", resp)
	c.JSON(200, resp)
}

func InfoMethod(ctx context.Context, c *app.RequestContext) {
	var req userInfoPb.UserInfoReq
	var isok bool
	fromId, _ := c.Get("from_id")
	user_id, isok := c.GetQuery("user_id")
	uid, _ := strconv.Atoi(user_id)
	req.ToId = uint64(uid)
	req.FromId = uint64(fromId.(uint))
	if !isok {
		c.String(400, "获取参数失败")
		return
	}
	resp, err := rpcClient.UserInfo.Info(ctx, &req)
	if err != nil {
		c.String(400, err.Error())
		return
	}
	log.Println("resp", resp)
	c.JSON(200, resp)
}

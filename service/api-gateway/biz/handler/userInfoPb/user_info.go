// Code generated by hertz generator.

package userInfo

import (
	"context"
	"github.com/cloudwego/kitex/client"
	"github.com/kitex-contrib/registry-nacos/resolver"
	"log"
	"paigu1902/douyin/service/rpc-user-info/kitex_gen/userInfoPb"
	"paigu1902/douyin/service/rpc-user-info/kitex_gen/userInfoPb/userinfo"
	"time"

	"github.com/cloudwego/hertz/pkg/app"
)

func LoginMethod(ctx context.Context, c *app.RequestContext) {
	r, err := resolver.NewDefaultNacosResolver()
	if err != nil {
		panic(err)
	}
	newClient := userinfo.MustNewClient(
		"userInfoImpl",
		client.WithResolver(r),
		client.WithRPCTimeout(time.Second*3),
	)
	var req userInfoPb.LoginReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(400, err.Error())
		return
	}
	resp, err := newClient.Login(context.Background(), &userInfoPb.LoginReq{UserName: req.UserName, Password: req.Password})
	if err != nil {
		log.Fatal(err)
	}
	log.Println("resp", resp)

	// 你可以修改整个函数的逻辑，而不仅仅局限于当前模板
	//resp.StatusMsg = "ok" // 添加的逻辑

	c.JSON(200, resp)

}

func RegisterMethod(ctx context.Context, c *app.RequestContext) {
	r, err := resolver.NewDefaultNacosResolver()
	if err != nil {
		panic(err)
	}
	newClient := userinfo.MustNewClient(
		"userInfoImpl",
		client.WithResolver(r),
		client.WithRPCTimeout(time.Second*3),
	)
	var req userInfoPb.RegisterReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(400, err.Error())
		return
	}
	resp, err := newClient.Register(context.Background(), &userInfoPb.RegisterReq{UserName: req.UserName, Password: req.Password})
	if err != nil {
		log.Fatal(err)
	}
	log.Println("resp", resp)

	// 你可以修改整个函数的逻辑，而不仅仅局限于当前模板
	//resp.StatusMsg = "ok" // 添加的逻辑

	c.JSON(200, resp)
}

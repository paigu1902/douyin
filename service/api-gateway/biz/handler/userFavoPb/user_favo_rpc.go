// Code generated by hertz generator.

package userFavo

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"log"
	dyUtils "paigu1902/douyin/common/utils"
	"paigu1902/douyin/service/api-gateway/biz/rpcClient"
	"paigu1902/douyin/service/rpc-user-info/kitex_gen/userInfoPb"
	"paigu1902/douyin/service/rpc-user-operator/rpc-user-favo/kitex_gen/userFavoPb"
	"strconv"
)

type FavoActionReq struct {
	VideId int64 `query:"videoId"`
	Type   int32 `query:"type" `
}

type FavoListReq struct {
	UserId int64 `query:"user_id"`
}

type UserHttp struct {
	UserId          int64  `json:"id"`
	UserName        string `json:"name"`
	FollowCount     int64  `json:"follow_count" default:"0"`
	FollowerCount   int64  `json:"follower_count" default:"0"`
	IsFollow        bool   `json:"is_follow" default:"false"`
	Avatar          string `json:"avatar" default:"https://img0.baidu.com/it/u=1705694933,4002952892&fm=253&app=138&size=w931&n=0&f=JPEG&fmt=auto?sec=1677085200&t=327023c8f454fb913a8a32d5485f403c"`
	BackgroundImage string `json:"background_image" default:"https://img0.baidu.com/it/u=1705694933,4002952892&fm=253&app=138&size=w931&n=0&f=JPEG&fmt=auto?sec=1677085200&t=327023c8f454fb913a8a32d5485f403c"`
	Signature       string `json:"signature" default:"666"`
	TotalFavorited  string `json:"total_favorited" default:"0"`
	WorkCount       int64  `json:"work_count" default:"0"`
	FavoriteCount   int64  `json:"favorite_count" default:"0"`
}

type VideoListHttp struct {
	Id            uint64    `json:"id"`
	User          *UserHttp `json:"author"`
	PlayUrl       string    `json:"play_url"`
	CoverUrl      string    `json:"cover_url"`
	FavoriteCount int64     `json:"favorite_count"`
	CommentCount  int64     `json:"comment_count"`
	IsFavorite    bool      `json:"is_favorite"`
	Title         string    `json:"title"`
}

func getUserHttp(user *userInfoPb.User) *UserHttp {
	return &UserHttp{
		UserId:          int64(user.GetUserId()),
		UserName:        user.GetUserName(),
		FollowCount:     user.GetFollowCount(),
		FollowerCount:   user.GetFollowerCount(),
		IsFollow:        user.GetIsFollow(),
		Avatar:          user.GetAvatar(),
		BackgroundImage: user.GetBackgroundImage(),
		Signature:       user.GetSignature(),
		TotalFavorited:  strconv.Itoa(int(user.GetTotalFavorited())),
		FavoriteCount:   user.GetFavoriteCount(),
		WorkCount:       user.GetWorkCount(),
	}
}

func GetVideoList(ctx context.Context, videolist []*userFavoPb.Video, FromId int64) ([]*VideoListHttp, error) {
	res := make([]*VideoListHttp, len(videolist))
	ids := make([]uint64, len(videolist))
	for i, v := range videolist {
		ids[i] = v.GetAuthor().GetId()
	}
	log.Println(ids)
	Info_resp, err := rpcClient.UserInfo.BatchInfo(ctx, &userInfoPb.BatchUserReq{
		Fromid:   uint64(FromId),
		Batchids: ids,
	})
	log.Println(Info_resp)
	if err != nil {
		return res, err
	}
	for i, v := range videolist {
		res[i] = &VideoListHttp{
			Id:            v.Id,
			User:          getUserHttp(Info_resp.GetBatchusers()[i]),
			PlayUrl:       v.GetPlayUrl(),
			CoverUrl:      v.GetCoverUrl(),
			FavoriteCount: v.GetFavoriteCount(),
			CommentCount:  v.GetCommentCount(),
			IsFavorite:    v.GetIsFavorite(),
			Title:         v.GetTitle(),
		}
	}
	return res, nil
}

func FavoActionMethod(ctx context.Context, c *app.RequestContext) {
	req := new(FavoActionReq)
	if err := c.BindAndValidate(req); err != nil {
		c.JSON(400, err.Error())
		return
	}
	id, err := dyUtils.GetFromId(c)
	if err != nil {
		c.JSON(400, err.Error())
		return
	}
	//log.Println(req, id, c)
	resp, err := rpcClient.UserFavo.FavoAction(ctx, &userFavoPb.FavoActionReq{
		UserId:  int64(id),
		VideoId: req.VideId,
		Type:    req.Type,
	})
	if err != nil {
		c.JSON(400, err.Error())
		return
	}
	c.JSON(200, utils.H{
		"status_code": resp.GetStatusCode(),
		"status_msg":  resp.GetStatusMsg(),
	})
	return
}

func FavoListMethod(ctx context.Context, c *app.RequestContext) {
	req := new(FavoListReq)
	if err := c.BindAndValidate(req); err != nil {
		c.JSON(400, err.Error())
		return
	}
	resp, err := rpcClient.UserFavo.FavoList(ctx, &userFavoPb.FavoListReq{
		UserId: req.UserId,
	})
	if err != nil {
		c.JSON(400, err.Error())
		return
	}
	videoList, err := GetVideoList(ctx, resp.GetVideoList(), req.UserId)
	if err != nil {
		c.JSON(400, err.Error())
		return
	}
	c.JSON(200, utils.H{
		"status_code": resp.GetStatusCode(),
		"status_msg":  resp.GetStatusMsg(),
		"video_list":  videoList,
	})
	return
}

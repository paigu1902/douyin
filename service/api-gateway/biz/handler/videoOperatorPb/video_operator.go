// Code generated by hertz generator.

package videoOperator

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/kitex/client"
	"github.com/kitex-contrib/registry-nacos/resolver"
	"io"
	"log"
	"mime/multipart"
	"paigu1902/douyin/service/rpc-video-operator/kitex_gen/videoOperatorPb"
	"paigu1902/douyin/service/rpc-video-operator/kitex_gen/videoOperatorPb/videooperator"
	"time"
)

type VideoReq struct {
	Data  *multipart.FileHeader `form:"data"`
	Token string                `form:"token"`
	Title string                `form:"title"`
}

// get 方法需要标注 query 参数
type PublishListReq struct {
	UserId string `query:"user_id"`
	Token  string `query:"token"`
}

type FeedReq struct {
	Token      string `query:"token"`
	LatestTime int64  `query:"latest_time"`
}

func (req *PublishListReq) getGrpcReq() *videoOperatorPb.PublishListReq {
	return &videoOperatorPb.PublishListReq{UserId: req.UserId, Token: req.Token}
}

func file2Byte(file *multipart.FileHeader) ([]byte, error) {
	filepoint, err := file.Open()
	if err != nil {
		return nil, err
	}
	defer filepoint.Close()
	var content []byte
	buf := make([]byte, 1024)
	for {
		n, err := filepoint.Read(buf)
		if err != nil && err != io.EOF {
			return nil, err
		}
		if n == 0 {
			break
		}
		content = append(content, buf[:n]...)
	}
	return content, nil
}

func PublishActionMethod(ctx context.Context, c *app.RequestContext) {
	r, err := resolver.NewDefaultNacosResolver()
	if err != nil {
		panic(err)
	}
	newClient := videooperator.MustNewClient(
		"videoOperatorImpl",
		client.WithResolver(r),
		client.WithRPCTimeout(time.Second*5),
	)
	var req VideoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(400, err.Error())
		return
	}
	data, err := file2Byte(req.Data)
	if err != nil {
		panic(err)
	}
	resp, err := newClient.Upload(context.Background(), &videoOperatorPb.VideoUploadReq{
		Token: req.Token,
		Data:  data,
		Title: req.Title,
	})
	if err != nil {
		log.Fatal(err)
	}
	log.Println("resp", resp)
	c.JSON(200, resp)
}

func FeedMethod(ctx context.Context, c *app.RequestContext) {
	r, err := resolver.NewDefaultNacosResolver()
	if err != nil {
		panic(err)
	}
	newClient := videooperator.MustNewClient(
		"videoOperatorImpl",
		client.WithResolver(r),
		client.WithRPCTimeout(time.Second*5),
	)
	var req FeedReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(400, err.Error())
		return
	}
	log.Printf("req:%v", req)
	resp, err := newClient.Feed(context.Background(), &videoOperatorPb.FeedReq{
		LatestTime: req.LatestTime,
		Token:      req.Token,
	})
	if err != nil {
		panic(err)
	}
	c.JSON(200, resp)
}
func PublishListMethod(ctx context.Context, c *app.RequestContext) {
	r, err := resolver.NewDefaultNacosResolver()
	if err != nil {
		panic(err)
	}
	client := videooperator.MustNewClient(
		"videoOperatorImpl",
		client.WithResolver(r),
		client.WithRPCTimeout(time.Second*5),
	)
	req := new(PublishListReq)
	// 1. 绑定校验参数
	if err = c.BindAndValidate(req); err != nil {
		c.JSON(400, err.Error())
		return
	}
	// 2.调用rpc
	resp, err := client.PublishList(ctx, req.getGrpcReq())
	if err != nil {
		c.JSON(400, err.Error())
		return
	}
	c.JSON(200, resp)
	return
}

//func PublishActionMethod(ctx context.Context, c *app.RequestContext) {
//	r, err := resolver.NewDefaultNacosResolver()
//	if err != nil {
//		panic(err)
//	}
//	client := videooperator.MustNewClient(
//		"videoOperatorImpl",
//		client.WithResolver(r),
//		client.WithRPCTimeout(time.Second*5),
//	)
//	var req videoOperatorPb.VideoUploadReq
//	if err = c.BindAndValidate(&req); err != nil {
//		c.String(400, err.Error())
//		return
//	}
//	resp, err := client.Upload(ctx, &req)
//	c.JSON(200, resp)
//	return
//}

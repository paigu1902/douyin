// Code generated by Kitex v0.4.4. DO NOT EDIT.

package userinfo

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
	userInfoPb "paigu1902/douyin/service/rpc-user-info/kitex_gen/userInfoPb"
)

func serviceInfo() *kitex.ServiceInfo {
	return userInfoServiceInfo
}

var userInfoServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserInfo"
	handlerType := (*userInfoPb.UserInfo)(nil)
	methods := map[string]kitex.MethodInfo{
		"Register":  kitex.NewMethodInfo(registerHandler, newRegisterArgs, newRegisterResult, false),
		"Login":     kitex.NewMethodInfo(loginHandler, newLoginArgs, newLoginResult, false),
		"Info":      kitex.NewMethodInfo(infoHandler, newInfoArgs, newInfoResult, false),
		"ActionDB":  kitex.NewMethodInfo(actionDBHandler, newActionDBArgs, newActionDBResult, false),
		"FavDB":     kitex.NewMethodInfo(favDBHandler, newFavDBArgs, newFavDBResult, false),
		"BatchInfo": kitex.NewMethodInfo(batchInfoHandler, newBatchInfoArgs, newBatchInfoResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "userInfoPb",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userInfoPb.RegisterReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userInfoPb.UserInfo).Register(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *RegisterArgs:
		success, err := handler.(userInfoPb.UserInfo).Register(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RegisterResult)
		realResult.Success = success
	}
	return nil
}
func newRegisterArgs() interface{} {
	return &RegisterArgs{}
}

func newRegisterResult() interface{} {
	return &RegisterResult{}
}

type RegisterArgs struct {
	Req *userInfoPb.RegisterReq
}

func (p *RegisterArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(userInfoPb.RegisterReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RegisterArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RegisterArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RegisterArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in RegisterArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *RegisterArgs) Unmarshal(in []byte) error {
	msg := new(userInfoPb.RegisterReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RegisterArgs_Req_DEFAULT *userInfoPb.RegisterReq

func (p *RegisterArgs) GetReq() *userInfoPb.RegisterReq {
	if !p.IsSetReq() {
		return RegisterArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RegisterArgs) IsSetReq() bool {
	return p.Req != nil
}

type RegisterResult struct {
	Success *userInfoPb.RegisterResp
}

var RegisterResult_Success_DEFAULT *userInfoPb.RegisterResp

func (p *RegisterResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(userInfoPb.RegisterResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RegisterResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RegisterResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RegisterResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in RegisterResult")
	}
	return proto.Marshal(p.Success)
}

func (p *RegisterResult) Unmarshal(in []byte) error {
	msg := new(userInfoPb.RegisterResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RegisterResult) GetSuccess() *userInfoPb.RegisterResp {
	if !p.IsSetSuccess() {
		return RegisterResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RegisterResult) SetSuccess(x interface{}) {
	p.Success = x.(*userInfoPb.RegisterResp)
}

func (p *RegisterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userInfoPb.LoginReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userInfoPb.UserInfo).Login(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *LoginArgs:
		success, err := handler.(userInfoPb.UserInfo).Login(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*LoginResult)
		realResult.Success = success
	}
	return nil
}
func newLoginArgs() interface{} {
	return &LoginArgs{}
}

func newLoginResult() interface{} {
	return &LoginResult{}
}

type LoginArgs struct {
	Req *userInfoPb.LoginReq
}

func (p *LoginArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(userInfoPb.LoginReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *LoginArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *LoginArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *LoginArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in LoginArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *LoginArgs) Unmarshal(in []byte) error {
	msg := new(userInfoPb.LoginReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var LoginArgs_Req_DEFAULT *userInfoPb.LoginReq

func (p *LoginArgs) GetReq() *userInfoPb.LoginReq {
	if !p.IsSetReq() {
		return LoginArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *LoginArgs) IsSetReq() bool {
	return p.Req != nil
}

type LoginResult struct {
	Success *userInfoPb.LoginResp
}

var LoginResult_Success_DEFAULT *userInfoPb.LoginResp

func (p *LoginResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(userInfoPb.LoginResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *LoginResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *LoginResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *LoginResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in LoginResult")
	}
	return proto.Marshal(p.Success)
}

func (p *LoginResult) Unmarshal(in []byte) error {
	msg := new(userInfoPb.LoginResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *LoginResult) GetSuccess() *userInfoPb.LoginResp {
	if !p.IsSetSuccess() {
		return LoginResult_Success_DEFAULT
	}
	return p.Success
}

func (p *LoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*userInfoPb.LoginResp)
}

func (p *LoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func infoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userInfoPb.UserInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userInfoPb.UserInfo).Info(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *InfoArgs:
		success, err := handler.(userInfoPb.UserInfo).Info(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*InfoResult)
		realResult.Success = success
	}
	return nil
}
func newInfoArgs() interface{} {
	return &InfoArgs{}
}

func newInfoResult() interface{} {
	return &InfoResult{}
}

type InfoArgs struct {
	Req *userInfoPb.UserInfoReq
}

func (p *InfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(userInfoPb.UserInfoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *InfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *InfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *InfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in InfoArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *InfoArgs) Unmarshal(in []byte) error {
	msg := new(userInfoPb.UserInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var InfoArgs_Req_DEFAULT *userInfoPb.UserInfoReq

func (p *InfoArgs) GetReq() *userInfoPb.UserInfoReq {
	if !p.IsSetReq() {
		return InfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *InfoArgs) IsSetReq() bool {
	return p.Req != nil
}

type InfoResult struct {
	Success *userInfoPb.UserInfoResp
}

var InfoResult_Success_DEFAULT *userInfoPb.UserInfoResp

func (p *InfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(userInfoPb.UserInfoResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *InfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *InfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *InfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in InfoResult")
	}
	return proto.Marshal(p.Success)
}

func (p *InfoResult) Unmarshal(in []byte) error {
	msg := new(userInfoPb.UserInfoResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *InfoResult) GetSuccess() *userInfoPb.UserInfoResp {
	if !p.IsSetSuccess() {
		return InfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *InfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*userInfoPb.UserInfoResp)
}

func (p *InfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func actionDBHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userInfoPb.ActionDBReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userInfoPb.UserInfo).ActionDB(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ActionDBArgs:
		success, err := handler.(userInfoPb.UserInfo).ActionDB(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ActionDBResult)
		realResult.Success = success
	}
	return nil
}
func newActionDBArgs() interface{} {
	return &ActionDBArgs{}
}

func newActionDBResult() interface{} {
	return &ActionDBResult{}
}

type ActionDBArgs struct {
	Req *userInfoPb.ActionDBReq
}

func (p *ActionDBArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(userInfoPb.ActionDBReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ActionDBArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ActionDBArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ActionDBArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ActionDBArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ActionDBArgs) Unmarshal(in []byte) error {
	msg := new(userInfoPb.ActionDBReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ActionDBArgs_Req_DEFAULT *userInfoPb.ActionDBReq

func (p *ActionDBArgs) GetReq() *userInfoPb.ActionDBReq {
	if !p.IsSetReq() {
		return ActionDBArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ActionDBArgs) IsSetReq() bool {
	return p.Req != nil
}

type ActionDBResult struct {
	Success *userInfoPb.ActionDBResp
}

var ActionDBResult_Success_DEFAULT *userInfoPb.ActionDBResp

func (p *ActionDBResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(userInfoPb.ActionDBResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ActionDBResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ActionDBResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ActionDBResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ActionDBResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ActionDBResult) Unmarshal(in []byte) error {
	msg := new(userInfoPb.ActionDBResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ActionDBResult) GetSuccess() *userInfoPb.ActionDBResp {
	if !p.IsSetSuccess() {
		return ActionDBResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ActionDBResult) SetSuccess(x interface{}) {
	p.Success = x.(*userInfoPb.ActionDBResp)
}

func (p *ActionDBResult) IsSetSuccess() bool {
	return p.Success != nil
}

func favDBHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userInfoPb.FavDBReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userInfoPb.UserInfo).FavDB(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *FavDBArgs:
		success, err := handler.(userInfoPb.UserInfo).FavDB(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FavDBResult)
		realResult.Success = success
	}
	return nil
}
func newFavDBArgs() interface{} {
	return &FavDBArgs{}
}

func newFavDBResult() interface{} {
	return &FavDBResult{}
}

type FavDBArgs struct {
	Req *userInfoPb.FavDBReq
}

func (p *FavDBArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(userInfoPb.FavDBReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FavDBArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FavDBArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FavDBArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in FavDBArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *FavDBArgs) Unmarshal(in []byte) error {
	msg := new(userInfoPb.FavDBReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FavDBArgs_Req_DEFAULT *userInfoPb.FavDBReq

func (p *FavDBArgs) GetReq() *userInfoPb.FavDBReq {
	if !p.IsSetReq() {
		return FavDBArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FavDBArgs) IsSetReq() bool {
	return p.Req != nil
}

type FavDBResult struct {
	Success *userInfoPb.FavDBResp
}

var FavDBResult_Success_DEFAULT *userInfoPb.FavDBResp

func (p *FavDBResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(userInfoPb.FavDBResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FavDBResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FavDBResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FavDBResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in FavDBResult")
	}
	return proto.Marshal(p.Success)
}

func (p *FavDBResult) Unmarshal(in []byte) error {
	msg := new(userInfoPb.FavDBResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FavDBResult) GetSuccess() *userInfoPb.FavDBResp {
	if !p.IsSetSuccess() {
		return FavDBResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FavDBResult) SetSuccess(x interface{}) {
	p.Success = x.(*userInfoPb.FavDBResp)
}

func (p *FavDBResult) IsSetSuccess() bool {
	return p.Success != nil
}

func batchInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userInfoPb.BatchUserReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userInfoPb.UserInfo).BatchInfo(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *BatchInfoArgs:
		success, err := handler.(userInfoPb.UserInfo).BatchInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*BatchInfoResult)
		realResult.Success = success
	}
	return nil
}
func newBatchInfoArgs() interface{} {
	return &BatchInfoArgs{}
}

func newBatchInfoResult() interface{} {
	return &BatchInfoResult{}
}

type BatchInfoArgs struct {
	Req *userInfoPb.BatchUserReq
}

func (p *BatchInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(userInfoPb.BatchUserReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *BatchInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *BatchInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *BatchInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in BatchInfoArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *BatchInfoArgs) Unmarshal(in []byte) error {
	msg := new(userInfoPb.BatchUserReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var BatchInfoArgs_Req_DEFAULT *userInfoPb.BatchUserReq

func (p *BatchInfoArgs) GetReq() *userInfoPb.BatchUserReq {
	if !p.IsSetReq() {
		return BatchInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *BatchInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

type BatchInfoResult struct {
	Success *userInfoPb.BtachUserResp
}

var BatchInfoResult_Success_DEFAULT *userInfoPb.BtachUserResp

func (p *BatchInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(userInfoPb.BtachUserResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *BatchInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *BatchInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *BatchInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in BatchInfoResult")
	}
	return proto.Marshal(p.Success)
}

func (p *BatchInfoResult) Unmarshal(in []byte) error {
	msg := new(userInfoPb.BtachUserResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *BatchInfoResult) GetSuccess() *userInfoPb.BtachUserResp {
	if !p.IsSetSuccess() {
		return BatchInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *BatchInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*userInfoPb.BtachUserResp)
}

func (p *BatchInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Register(ctx context.Context, Req *userInfoPb.RegisterReq) (r *userInfoPb.RegisterResp, err error) {
	var _args RegisterArgs
	_args.Req = Req
	var _result RegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Login(ctx context.Context, Req *userInfoPb.LoginReq) (r *userInfoPb.LoginResp, err error) {
	var _args LoginArgs
	_args.Req = Req
	var _result LoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Info(ctx context.Context, Req *userInfoPb.UserInfoReq) (r *userInfoPb.UserInfoResp, err error) {
	var _args InfoArgs
	_args.Req = Req
	var _result InfoResult
	if err = p.c.Call(ctx, "Info", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ActionDB(ctx context.Context, Req *userInfoPb.ActionDBReq) (r *userInfoPb.ActionDBResp, err error) {
	var _args ActionDBArgs
	_args.Req = Req
	var _result ActionDBResult
	if err = p.c.Call(ctx, "ActionDB", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavDB(ctx context.Context, Req *userInfoPb.FavDBReq) (r *userInfoPb.FavDBResp, err error) {
	var _args FavDBArgs
	_args.Req = Req
	var _result FavDBResult
	if err = p.c.Call(ctx, "FavDB", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchInfo(ctx context.Context, Req *userInfoPb.BatchUserReq) (r *userInfoPb.BtachUserResp, err error) {
	var _args BatchInfoArgs
	_args.Req = Req
	var _result BatchInfoResult
	if err = p.c.Call(ctx, "BatchInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

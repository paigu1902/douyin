// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: service/rpc-video-operator/videoOperator.proto

package videoOperatorPb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VideoOperatorClient is the client API for VideoOperator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoOperatorClient interface {
	Upload(ctx context.Context, in *VideoUploadReq, opts ...grpc.CallOption) (*VideoUploadResp, error)
}

type videoOperatorClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoOperatorClient(cc grpc.ClientConnInterface) VideoOperatorClient {
	return &videoOperatorClient{cc}
}

func (c *videoOperatorClient) Upload(ctx context.Context, in *VideoUploadReq, opts ...grpc.CallOption) (*VideoUploadResp, error) {
	out := new(VideoUploadResp)
	err := c.cc.Invoke(ctx, "/videoOperatorPb.VideoOperator/Upload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoOperatorServer is the server API for VideoOperator service.
// All implementations must embed UnimplementedVideoOperatorServer
// for forward compatibility
type VideoOperatorServer interface {
	Upload(context.Context, *VideoUploadReq) (*VideoUploadResp, error)
	mustEmbedUnimplementedVideoOperatorServer()
}

// UnimplementedVideoOperatorServer must be embedded to have forward compatible implementations.
type UnimplementedVideoOperatorServer struct {
}

func (UnimplementedVideoOperatorServer) Upload(context.Context, *VideoUploadReq) (*VideoUploadResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedVideoOperatorServer) mustEmbedUnimplementedVideoOperatorServer() {}

// UnsafeVideoOperatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoOperatorServer will
// result in compilation errors.
type UnsafeVideoOperatorServer interface {
	mustEmbedUnimplementedVideoOperatorServer()
}

func RegisterVideoOperatorServer(s grpc.ServiceRegistrar, srv VideoOperatorServer) {
	s.RegisterService(&VideoOperator_ServiceDesc, srv)
}

func _VideoOperator_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoUploadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoOperatorServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videoOperatorPb.VideoOperator/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoOperatorServer).Upload(ctx, req.(*VideoUploadReq))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoOperator_ServiceDesc is the grpc.ServiceDesc for VideoOperator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoOperator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "videoOperatorPb.VideoOperator",
	HandlerType: (*VideoOperatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upload",
			Handler:    _VideoOperator_Upload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/rpc-video-operator/videoOperator.proto",
}

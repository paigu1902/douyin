// Code generated by Kitex v0.4.4. DO NOT EDIT.

package userrelation

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
	userRelationPb "paigu1902/douyin/service/rpc-user-relation/kitex_gen/userRelationPb"
)

func serviceInfo() *kitex.ServiceInfo {
	return userRelationServiceInfo
}

var userRelationServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserRelation"
	handlerType := (*userRelationPb.UserRelation)(nil)
	methods := map[string]kitex.MethodInfo{
		"FollowAction":   kitex.NewMethodInfo(followActionHandler, newFollowActionArgs, newFollowActionResult, false),
		"FollowList":     kitex.NewMethodInfo(followListHandler, newFollowListArgs, newFollowListResult, false),
		"FollowerList":   kitex.NewMethodInfo(followerListHandler, newFollowerListArgs, newFollowerListResult, false),
		"FriendList":     kitex.NewMethodInfo(friendListHandler, newFriendListArgs, newFriendListResult, false),
		"SendMessage":    kitex.NewMethodInfo(sendMessageHandler, newSendMessageArgs, newSendMessageResult, false),
		"HistoryMessage": kitex.NewMethodInfo(historyMessageHandler, newHistoryMessageArgs, newHistoryMessageResult, false),
		"IsFollow":       kitex.NewMethodInfo(isFollowHandler, newIsFollowArgs, newIsFollowResult, false),
		"IsFollowList":   kitex.NewMethodInfo(isFollowListHandler, newIsFollowListArgs, newIsFollowListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "userRelationPb",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func followActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userRelationPb.FollowActionReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userRelationPb.UserRelation).FollowAction(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *FollowActionArgs:
		success, err := handler.(userRelationPb.UserRelation).FollowAction(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FollowActionResult)
		realResult.Success = success
	}
	return nil
}
func newFollowActionArgs() interface{} {
	return &FollowActionArgs{}
}

func newFollowActionResult() interface{} {
	return &FollowActionResult{}
}

type FollowActionArgs struct {
	Req *userRelationPb.FollowActionReq
}

func (p *FollowActionArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(userRelationPb.FollowActionReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FollowActionArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FollowActionArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FollowActionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in FollowActionArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *FollowActionArgs) Unmarshal(in []byte) error {
	msg := new(userRelationPb.FollowActionReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FollowActionArgs_Req_DEFAULT *userRelationPb.FollowActionReq

func (p *FollowActionArgs) GetReq() *userRelationPb.FollowActionReq {
	if !p.IsSetReq() {
		return FollowActionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FollowActionArgs) IsSetReq() bool {
	return p.Req != nil
}

type FollowActionResult struct {
	Success *userRelationPb.FollowActionResp
}

var FollowActionResult_Success_DEFAULT *userRelationPb.FollowActionResp

func (p *FollowActionResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(userRelationPb.FollowActionResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FollowActionResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FollowActionResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FollowActionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in FollowActionResult")
	}
	return proto.Marshal(p.Success)
}

func (p *FollowActionResult) Unmarshal(in []byte) error {
	msg := new(userRelationPb.FollowActionResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FollowActionResult) GetSuccess() *userRelationPb.FollowActionResp {
	if !p.IsSetSuccess() {
		return FollowActionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FollowActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*userRelationPb.FollowActionResp)
}

func (p *FollowActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func followListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userRelationPb.FollowListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userRelationPb.UserRelation).FollowList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *FollowListArgs:
		success, err := handler.(userRelationPb.UserRelation).FollowList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FollowListResult)
		realResult.Success = success
	}
	return nil
}
func newFollowListArgs() interface{} {
	return &FollowListArgs{}
}

func newFollowListResult() interface{} {
	return &FollowListResult{}
}

type FollowListArgs struct {
	Req *userRelationPb.FollowListReq
}

func (p *FollowListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(userRelationPb.FollowListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FollowListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FollowListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FollowListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in FollowListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *FollowListArgs) Unmarshal(in []byte) error {
	msg := new(userRelationPb.FollowListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FollowListArgs_Req_DEFAULT *userRelationPb.FollowListReq

func (p *FollowListArgs) GetReq() *userRelationPb.FollowListReq {
	if !p.IsSetReq() {
		return FollowListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FollowListArgs) IsSetReq() bool {
	return p.Req != nil
}

type FollowListResult struct {
	Success *userRelationPb.FollowListResp
}

var FollowListResult_Success_DEFAULT *userRelationPb.FollowListResp

func (p *FollowListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(userRelationPb.FollowListResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FollowListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FollowListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FollowListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in FollowListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *FollowListResult) Unmarshal(in []byte) error {
	msg := new(userRelationPb.FollowListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FollowListResult) GetSuccess() *userRelationPb.FollowListResp {
	if !p.IsSetSuccess() {
		return FollowListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FollowListResult) SetSuccess(x interface{}) {
	p.Success = x.(*userRelationPb.FollowListResp)
}

func (p *FollowListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func followerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userRelationPb.FollowerListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userRelationPb.UserRelation).FollowerList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *FollowerListArgs:
		success, err := handler.(userRelationPb.UserRelation).FollowerList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FollowerListResult)
		realResult.Success = success
	}
	return nil
}
func newFollowerListArgs() interface{} {
	return &FollowerListArgs{}
}

func newFollowerListResult() interface{} {
	return &FollowerListResult{}
}

type FollowerListArgs struct {
	Req *userRelationPb.FollowerListReq
}

func (p *FollowerListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(userRelationPb.FollowerListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FollowerListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FollowerListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FollowerListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in FollowerListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *FollowerListArgs) Unmarshal(in []byte) error {
	msg := new(userRelationPb.FollowerListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FollowerListArgs_Req_DEFAULT *userRelationPb.FollowerListReq

func (p *FollowerListArgs) GetReq() *userRelationPb.FollowerListReq {
	if !p.IsSetReq() {
		return FollowerListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FollowerListArgs) IsSetReq() bool {
	return p.Req != nil
}

type FollowerListResult struct {
	Success *userRelationPb.FollowerListResp
}

var FollowerListResult_Success_DEFAULT *userRelationPb.FollowerListResp

func (p *FollowerListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(userRelationPb.FollowerListResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FollowerListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FollowerListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FollowerListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in FollowerListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *FollowerListResult) Unmarshal(in []byte) error {
	msg := new(userRelationPb.FollowerListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FollowerListResult) GetSuccess() *userRelationPb.FollowerListResp {
	if !p.IsSetSuccess() {
		return FollowerListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FollowerListResult) SetSuccess(x interface{}) {
	p.Success = x.(*userRelationPb.FollowerListResp)
}

func (p *FollowerListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func friendListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userRelationPb.FriendListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userRelationPb.UserRelation).FriendList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *FriendListArgs:
		success, err := handler.(userRelationPb.UserRelation).FriendList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FriendListResult)
		realResult.Success = success
	}
	return nil
}
func newFriendListArgs() interface{} {
	return &FriendListArgs{}
}

func newFriendListResult() interface{} {
	return &FriendListResult{}
}

type FriendListArgs struct {
	Req *userRelationPb.FriendListReq
}

func (p *FriendListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(userRelationPb.FriendListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FriendListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FriendListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FriendListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in FriendListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *FriendListArgs) Unmarshal(in []byte) error {
	msg := new(userRelationPb.FriendListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FriendListArgs_Req_DEFAULT *userRelationPb.FriendListReq

func (p *FriendListArgs) GetReq() *userRelationPb.FriendListReq {
	if !p.IsSetReq() {
		return FriendListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FriendListArgs) IsSetReq() bool {
	return p.Req != nil
}

type FriendListResult struct {
	Success *userRelationPb.FriendListResp
}

var FriendListResult_Success_DEFAULT *userRelationPb.FriendListResp

func (p *FriendListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(userRelationPb.FriendListResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FriendListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FriendListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FriendListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in FriendListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *FriendListResult) Unmarshal(in []byte) error {
	msg := new(userRelationPb.FriendListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FriendListResult) GetSuccess() *userRelationPb.FriendListResp {
	if !p.IsSetSuccess() {
		return FriendListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FriendListResult) SetSuccess(x interface{}) {
	p.Success = x.(*userRelationPb.FriendListResp)
}

func (p *FriendListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func sendMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userRelationPb.SendMessageReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userRelationPb.UserRelation).SendMessage(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SendMessageArgs:
		success, err := handler.(userRelationPb.UserRelation).SendMessage(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SendMessageResult)
		realResult.Success = success
	}
	return nil
}
func newSendMessageArgs() interface{} {
	return &SendMessageArgs{}
}

func newSendMessageResult() interface{} {
	return &SendMessageResult{}
}

type SendMessageArgs struct {
	Req *userRelationPb.SendMessageReq
}

func (p *SendMessageArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(userRelationPb.SendMessageReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SendMessageArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SendMessageArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SendMessageArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in SendMessageArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *SendMessageArgs) Unmarshal(in []byte) error {
	msg := new(userRelationPb.SendMessageReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SendMessageArgs_Req_DEFAULT *userRelationPb.SendMessageReq

func (p *SendMessageArgs) GetReq() *userRelationPb.SendMessageReq {
	if !p.IsSetReq() {
		return SendMessageArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SendMessageArgs) IsSetReq() bool {
	return p.Req != nil
}

type SendMessageResult struct {
	Success *userRelationPb.SendMessageResp
}

var SendMessageResult_Success_DEFAULT *userRelationPb.SendMessageResp

func (p *SendMessageResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(userRelationPb.SendMessageResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SendMessageResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SendMessageResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SendMessageResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in SendMessageResult")
	}
	return proto.Marshal(p.Success)
}

func (p *SendMessageResult) Unmarshal(in []byte) error {
	msg := new(userRelationPb.SendMessageResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SendMessageResult) GetSuccess() *userRelationPb.SendMessageResp {
	if !p.IsSetSuccess() {
		return SendMessageResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SendMessageResult) SetSuccess(x interface{}) {
	p.Success = x.(*userRelationPb.SendMessageResp)
}

func (p *SendMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func historyMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userRelationPb.HistoryMessageReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userRelationPb.UserRelation).HistoryMessage(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *HistoryMessageArgs:
		success, err := handler.(userRelationPb.UserRelation).HistoryMessage(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*HistoryMessageResult)
		realResult.Success = success
	}
	return nil
}
func newHistoryMessageArgs() interface{} {
	return &HistoryMessageArgs{}
}

func newHistoryMessageResult() interface{} {
	return &HistoryMessageResult{}
}

type HistoryMessageArgs struct {
	Req *userRelationPb.HistoryMessageReq
}

func (p *HistoryMessageArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(userRelationPb.HistoryMessageReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *HistoryMessageArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *HistoryMessageArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *HistoryMessageArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in HistoryMessageArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *HistoryMessageArgs) Unmarshal(in []byte) error {
	msg := new(userRelationPb.HistoryMessageReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var HistoryMessageArgs_Req_DEFAULT *userRelationPb.HistoryMessageReq

func (p *HistoryMessageArgs) GetReq() *userRelationPb.HistoryMessageReq {
	if !p.IsSetReq() {
		return HistoryMessageArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *HistoryMessageArgs) IsSetReq() bool {
	return p.Req != nil
}

type HistoryMessageResult struct {
	Success *userRelationPb.HistoryMessageResp
}

var HistoryMessageResult_Success_DEFAULT *userRelationPb.HistoryMessageResp

func (p *HistoryMessageResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(userRelationPb.HistoryMessageResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *HistoryMessageResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *HistoryMessageResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *HistoryMessageResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in HistoryMessageResult")
	}
	return proto.Marshal(p.Success)
}

func (p *HistoryMessageResult) Unmarshal(in []byte) error {
	msg := new(userRelationPb.HistoryMessageResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *HistoryMessageResult) GetSuccess() *userRelationPb.HistoryMessageResp {
	if !p.IsSetSuccess() {
		return HistoryMessageResult_Success_DEFAULT
	}
	return p.Success
}

func (p *HistoryMessageResult) SetSuccess(x interface{}) {
	p.Success = x.(*userRelationPb.HistoryMessageResp)
}

func (p *HistoryMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func isFollowHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userRelationPb.IsFollowReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userRelationPb.UserRelation).IsFollow(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *IsFollowArgs:
		success, err := handler.(userRelationPb.UserRelation).IsFollow(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*IsFollowResult)
		realResult.Success = success
	}
	return nil
}
func newIsFollowArgs() interface{} {
	return &IsFollowArgs{}
}

func newIsFollowResult() interface{} {
	return &IsFollowResult{}
}

type IsFollowArgs struct {
	Req *userRelationPb.IsFollowReq
}

func (p *IsFollowArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(userRelationPb.IsFollowReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *IsFollowArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *IsFollowArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *IsFollowArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in IsFollowArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *IsFollowArgs) Unmarshal(in []byte) error {
	msg := new(userRelationPb.IsFollowReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var IsFollowArgs_Req_DEFAULT *userRelationPb.IsFollowReq

func (p *IsFollowArgs) GetReq() *userRelationPb.IsFollowReq {
	if !p.IsSetReq() {
		return IsFollowArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *IsFollowArgs) IsSetReq() bool {
	return p.Req != nil
}

type IsFollowResult struct {
	Success *userRelationPb.IsFollowResp
}

var IsFollowResult_Success_DEFAULT *userRelationPb.IsFollowResp

func (p *IsFollowResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(userRelationPb.IsFollowResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *IsFollowResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *IsFollowResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *IsFollowResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in IsFollowResult")
	}
	return proto.Marshal(p.Success)
}

func (p *IsFollowResult) Unmarshal(in []byte) error {
	msg := new(userRelationPb.IsFollowResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *IsFollowResult) GetSuccess() *userRelationPb.IsFollowResp {
	if !p.IsSetSuccess() {
		return IsFollowResult_Success_DEFAULT
	}
	return p.Success
}

func (p *IsFollowResult) SetSuccess(x interface{}) {
	p.Success = x.(*userRelationPb.IsFollowResp)
}

func (p *IsFollowResult) IsSetSuccess() bool {
	return p.Success != nil
}

func isFollowListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userRelationPb.IsFollowListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userRelationPb.UserRelation).IsFollowList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *IsFollowListArgs:
		success, err := handler.(userRelationPb.UserRelation).IsFollowList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*IsFollowListResult)
		realResult.Success = success
	}
	return nil
}
func newIsFollowListArgs() interface{} {
	return &IsFollowListArgs{}
}

func newIsFollowListResult() interface{} {
	return &IsFollowListResult{}
}

type IsFollowListArgs struct {
	Req *userRelationPb.IsFollowListReq
}

func (p *IsFollowListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(userRelationPb.IsFollowListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *IsFollowListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *IsFollowListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *IsFollowListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in IsFollowListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *IsFollowListArgs) Unmarshal(in []byte) error {
	msg := new(userRelationPb.IsFollowListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var IsFollowListArgs_Req_DEFAULT *userRelationPb.IsFollowListReq

func (p *IsFollowListArgs) GetReq() *userRelationPb.IsFollowListReq {
	if !p.IsSetReq() {
		return IsFollowListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *IsFollowListArgs) IsSetReq() bool {
	return p.Req != nil
}

type IsFollowListResult struct {
	Success *userRelationPb.IsFollowListResp
}

var IsFollowListResult_Success_DEFAULT *userRelationPb.IsFollowListResp

func (p *IsFollowListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(userRelationPb.IsFollowListResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *IsFollowListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *IsFollowListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *IsFollowListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in IsFollowListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *IsFollowListResult) Unmarshal(in []byte) error {
	msg := new(userRelationPb.IsFollowListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *IsFollowListResult) GetSuccess() *userRelationPb.IsFollowListResp {
	if !p.IsSetSuccess() {
		return IsFollowListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *IsFollowListResult) SetSuccess(x interface{}) {
	p.Success = x.(*userRelationPb.IsFollowListResp)
}

func (p *IsFollowListResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FollowAction(ctx context.Context, Req *userRelationPb.FollowActionReq) (r *userRelationPb.FollowActionResp, err error) {
	var _args FollowActionArgs
	_args.Req = Req
	var _result FollowActionResult
	if err = p.c.Call(ctx, "FollowAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowList(ctx context.Context, Req *userRelationPb.FollowListReq) (r *userRelationPb.FollowListResp, err error) {
	var _args FollowListArgs
	_args.Req = Req
	var _result FollowListResult
	if err = p.c.Call(ctx, "FollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowerList(ctx context.Context, Req *userRelationPb.FollowerListReq) (r *userRelationPb.FollowerListResp, err error) {
	var _args FollowerListArgs
	_args.Req = Req
	var _result FollowerListResult
	if err = p.c.Call(ctx, "FollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FriendList(ctx context.Context, Req *userRelationPb.FriendListReq) (r *userRelationPb.FriendListResp, err error) {
	var _args FriendListArgs
	_args.Req = Req
	var _result FriendListResult
	if err = p.c.Call(ctx, "FriendList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SendMessage(ctx context.Context, Req *userRelationPb.SendMessageReq) (r *userRelationPb.SendMessageResp, err error) {
	var _args SendMessageArgs
	_args.Req = Req
	var _result SendMessageResult
	if err = p.c.Call(ctx, "SendMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) HistoryMessage(ctx context.Context, Req *userRelationPb.HistoryMessageReq) (r *userRelationPb.HistoryMessageResp, err error) {
	var _args HistoryMessageArgs
	_args.Req = Req
	var _result HistoryMessageResult
	if err = p.c.Call(ctx, "HistoryMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IsFollow(ctx context.Context, Req *userRelationPb.IsFollowReq) (r *userRelationPb.IsFollowResp, err error) {
	var _args IsFollowArgs
	_args.Req = Req
	var _result IsFollowResult
	if err = p.c.Call(ctx, "IsFollow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IsFollowList(ctx context.Context, Req *userRelationPb.IsFollowListReq) (r *userRelationPb.IsFollowListResp, err error) {
	var _args IsFollowListArgs
	_args.Req = Req
	var _result IsFollowListResult
	if err = p.c.Call(ctx, "IsFollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

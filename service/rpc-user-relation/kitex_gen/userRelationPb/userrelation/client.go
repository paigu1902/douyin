// Code generated by Kitex v0.4.4. DO NOT EDIT.

package userrelation

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	userRelationPb "paigu1902/douyin/service/rpc-user-relation/kitex_gen/userRelationPb"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	FollowAction(ctx context.Context, Req *userRelationPb.FollowActionReq, callOptions ...callopt.Option) (r *userRelationPb.FollowActionResp, err error)
	FollowList(ctx context.Context, Req *userRelationPb.FollowListReq, callOptions ...callopt.Option) (r *userRelationPb.FollowListResp, err error)
	FollowerList(ctx context.Context, Req *userRelationPb.FollowerListReq, callOptions ...callopt.Option) (r *userRelationPb.FollowerListResp, err error)
	FriendList(ctx context.Context, Req *userRelationPb.FriendListReq, callOptions ...callopt.Option) (r *userRelationPb.FriendListResp, err error)
	SendMessage(ctx context.Context, Req *userRelationPb.SendMessageReq, callOptions ...callopt.Option) (r *userRelationPb.SendMessageResp, err error)
	MessageChat(ctx context.Context, Req *userRelationPb.MessageChatReq, callOptions ...callopt.Option) (r *userRelationPb.MessageChatResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kUserRelationClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kUserRelationClient struct {
	*kClient
}

func (p *kUserRelationClient) FollowAction(ctx context.Context, Req *userRelationPb.FollowActionReq, callOptions ...callopt.Option) (r *userRelationPb.FollowActionResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FollowAction(ctx, Req)
}

func (p *kUserRelationClient) FollowList(ctx context.Context, Req *userRelationPb.FollowListReq, callOptions ...callopt.Option) (r *userRelationPb.FollowListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FollowList(ctx, Req)
}

func (p *kUserRelationClient) FollowerList(ctx context.Context, Req *userRelationPb.FollowerListReq, callOptions ...callopt.Option) (r *userRelationPb.FollowerListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FollowerList(ctx, Req)
}

func (p *kUserRelationClient) FriendList(ctx context.Context, Req *userRelationPb.FriendListReq, callOptions ...callopt.Option) (r *userRelationPb.FriendListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FriendList(ctx, Req)
}

func (p *kUserRelationClient) SendMessage(ctx context.Context, Req *userRelationPb.SendMessageReq, callOptions ...callopt.Option) (r *userRelationPb.SendMessageResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SendMessage(ctx, Req)
}

func (p *kUserRelationClient) MessageChat(ctx context.Context, Req *userRelationPb.MessageChatReq, callOptions ...callopt.Option) (r *userRelationPb.MessageChatResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MessageChat(ctx, Req)
}

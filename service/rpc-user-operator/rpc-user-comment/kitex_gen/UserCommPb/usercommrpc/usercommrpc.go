// Code generated by Kitex v0.4.4. DO NOT EDIT.

package usercommrpc

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
	UserCommPb "paigu1902/douyin/service/rpc-user-operator/rpc-user-comment/kitex_gen/UserCommPb"
)

func serviceInfo() *kitex.ServiceInfo {
	return userCommRpcServiceInfo
}

var userCommRpcServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserCommRpc"
	handlerType := (*UserCommPb.UserCommRpc)(nil)
	methods := map[string]kitex.MethodInfo{
		"InsertComment":      kitex.NewMethodInfo(insertCommentHandler, newInsertCommentArgs, newInsertCommentResult, false),
		"GetCommentsByVideo": kitex.NewMethodInfo(getCommentsByVideoHandler, newGetCommentsByVideoArgs, newGetCommentsByVideoResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "UserCommPb",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func insertCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(UserCommPb.DouyinCommentActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(UserCommPb.UserCommRpc).InsertComment(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *InsertCommentArgs:
		success, err := handler.(UserCommPb.UserCommRpc).InsertComment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*InsertCommentResult)
		realResult.Success = success
	}
	return nil
}
func newInsertCommentArgs() interface{} {
	return &InsertCommentArgs{}
}

func newInsertCommentResult() interface{} {
	return &InsertCommentResult{}
}

type InsertCommentArgs struct {
	Req *UserCommPb.DouyinCommentActionRequest
}

func (p *InsertCommentArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(UserCommPb.DouyinCommentActionRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *InsertCommentArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *InsertCommentArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *InsertCommentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in InsertCommentArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *InsertCommentArgs) Unmarshal(in []byte) error {
	msg := new(UserCommPb.DouyinCommentActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var InsertCommentArgs_Req_DEFAULT *UserCommPb.DouyinCommentActionRequest

func (p *InsertCommentArgs) GetReq() *UserCommPb.DouyinCommentActionRequest {
	if !p.IsSetReq() {
		return InsertCommentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *InsertCommentArgs) IsSetReq() bool {
	return p.Req != nil
}

type InsertCommentResult struct {
	Success *UserCommPb.DouyinCommentActionResponse
}

var InsertCommentResult_Success_DEFAULT *UserCommPb.DouyinCommentActionResponse

func (p *InsertCommentResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(UserCommPb.DouyinCommentActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *InsertCommentResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *InsertCommentResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *InsertCommentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in InsertCommentResult")
	}
	return proto.Marshal(p.Success)
}

func (p *InsertCommentResult) Unmarshal(in []byte) error {
	msg := new(UserCommPb.DouyinCommentActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *InsertCommentResult) GetSuccess() *UserCommPb.DouyinCommentActionResponse {
	if !p.IsSetSuccess() {
		return InsertCommentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *InsertCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*UserCommPb.DouyinCommentActionResponse)
}

func (p *InsertCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getCommentsByVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(UserCommPb.DouyinCommentListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(UserCommPb.UserCommRpc).GetCommentsByVideo(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetCommentsByVideoArgs:
		success, err := handler.(UserCommPb.UserCommRpc).GetCommentsByVideo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetCommentsByVideoResult)
		realResult.Success = success
	}
	return nil
}
func newGetCommentsByVideoArgs() interface{} {
	return &GetCommentsByVideoArgs{}
}

func newGetCommentsByVideoResult() interface{} {
	return &GetCommentsByVideoResult{}
}

type GetCommentsByVideoArgs struct {
	Req *UserCommPb.DouyinCommentListRequest
}

func (p *GetCommentsByVideoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(UserCommPb.DouyinCommentListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetCommentsByVideoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetCommentsByVideoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetCommentsByVideoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetCommentsByVideoArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetCommentsByVideoArgs) Unmarshal(in []byte) error {
	msg := new(UserCommPb.DouyinCommentListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetCommentsByVideoArgs_Req_DEFAULT *UserCommPb.DouyinCommentListRequest

func (p *GetCommentsByVideoArgs) GetReq() *UserCommPb.DouyinCommentListRequest {
	if !p.IsSetReq() {
		return GetCommentsByVideoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetCommentsByVideoArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetCommentsByVideoResult struct {
	Success *UserCommPb.DouyinCommentListResponse
}

var GetCommentsByVideoResult_Success_DEFAULT *UserCommPb.DouyinCommentListResponse

func (p *GetCommentsByVideoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(UserCommPb.DouyinCommentListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetCommentsByVideoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetCommentsByVideoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetCommentsByVideoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetCommentsByVideoResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetCommentsByVideoResult) Unmarshal(in []byte) error {
	msg := new(UserCommPb.DouyinCommentListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetCommentsByVideoResult) GetSuccess() *UserCommPb.DouyinCommentListResponse {
	if !p.IsSetSuccess() {
		return GetCommentsByVideoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetCommentsByVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*UserCommPb.DouyinCommentListResponse)
}

func (p *GetCommentsByVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) InsertComment(ctx context.Context, Req *UserCommPb.DouyinCommentActionRequest) (r *UserCommPb.DouyinCommentActionResponse, err error) {
	var _args InsertCommentArgs
	_args.Req = Req
	var _result InsertCommentResult
	if err = p.c.Call(ctx, "InsertComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCommentsByVideo(ctx context.Context, Req *UserCommPb.DouyinCommentListRequest) (r *UserCommPb.DouyinCommentListResponse, err error) {
	var _args GetCommentsByVideoArgs
	_args.Req = Req
	var _result GetCommentsByVideoResult
	if err = p.c.Call(ctx, "GetCommentsByVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
